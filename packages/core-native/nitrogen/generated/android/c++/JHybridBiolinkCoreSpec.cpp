///
/// JHybridBiolinkCoreSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridBiolinkCoreSpec.hpp"



#include <future>
#include <NitroModules/JPromise.hpp>
#include <optional>
#include <string>

namespace margelo::nitro::biolink::core {

  jni::local_ref<JHybridBiolinkCoreSpec::jhybriddata> JHybridBiolinkCoreSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridBiolinkCoreSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridBiolinkCoreSpec::initHybrid),
    });
  }

  size_t JHybridBiolinkCoreSpec::getExternalMemorySize() noexcept {
    static const auto method = _javaPart->getClass()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  std::future<bool> JHybridBiolinkCoreSpec::authenticate() {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JPromise::javaobject>()>("authenticate");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = std::make_shared<std::promise<bool>>();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JBoolean>(__boxedResult);
        __promise->set_value(__result->value());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JString>& __message) {
        std::runtime_error __error(__message->toStdString());
        __promise->set_exception(std::make_exception_ptr(__error));
      });
      return __promise->get_future();
    }();
  }
  std::future<void> JHybridBiolinkCoreSpec::storeSecret(const std::string& key, const std::string& value) {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* key */, jni::alias_ref<jni::JString> /* value */)>("storeSecret");
    auto __result = method(_javaPart, jni::make_jstring(key), jni::make_jstring(value));
    return [&]() {
      auto __promise = std::make_shared<std::promise<void>>();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        __promise->set_value();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JString>& __message) {
        std::runtime_error __error(__message->toStdString());
        __promise->set_exception(std::make_exception_ptr(__error));
      });
      return __promise->get_future();
    }();
  }
  std::future<std::optional<std::string>> JHybridBiolinkCoreSpec::getSecret(const std::string& key) {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* key */)>("getSecret");
    auto __result = method(_javaPart, jni::make_jstring(key));
    return [&]() {
      auto __promise = std::make_shared<std::promise<std::optional<std::string>>>();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JString>(__boxedResult);
        __promise->set_value(__result != nullptr ? std::make_optional(__result->toStdString()) : std::nullopt);
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JString>& __message) {
        std::runtime_error __error(__message->toStdString());
        __promise->set_exception(std::make_exception_ptr(__error));
      });
      return __promise->get_future();
    }();
  }

} // namespace margelo::nitro::biolink::core
