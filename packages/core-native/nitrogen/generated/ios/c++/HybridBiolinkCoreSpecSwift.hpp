///
/// HybridBiolinkCoreSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridBiolinkCoreSpec.hpp"

// Forward declaration of `HybridBiolinkCoreSpecCxx` to properly resolve imports.
namespace BiolinkCore { class HybridBiolinkCoreSpecCxx; }



#include <future>
#include <NitroModules/PromiseHolder.hpp>
#include <string>
#include <optional>

#if __has_include(<NitroModules/HybridContext.hpp>)
#include <NitroModules/HybridContext.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

#include "BiolinkCore-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::biolink::core {

  /**
   * The C++ part of HybridBiolinkCoreSpecCxx.swift.
   *
   * HybridBiolinkCoreSpecSwift (C++) accesses HybridBiolinkCoreSpecCxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridBiolinkCoreSpecCxx can directly inherit from the C++ class HybridBiolinkCoreSpec
   * to simplify the whole structure and memory management.
   */
  class HybridBiolinkCoreSpecSwift: public virtual HybridBiolinkCoreSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridBiolinkCoreSpecSwift(const BiolinkCore::HybridBiolinkCoreSpecCxx& swiftPart):
      HybridObject(HybridBiolinkCoreSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline BiolinkCore::HybridBiolinkCoreSpecCxx getSwiftPart() noexcept { return _swiftPart; }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::future<bool> authenticate() override {
      auto __result = _swiftPart.authenticate();
      return __result.getFuture();
    }
    inline std::future<void> storeSecret(const std::string& key, const std::string& value) override {
      auto __result = _swiftPart.storeSecret(key, value);
      return __result.getFuture();
    }
    inline std::future<std::optional<std::string>> getSecret(const std::string& key) override {
      auto __result = _swiftPart.getSecret(key);
      return __result.getFuture();
    }

  private:
    BiolinkCore::HybridBiolinkCoreSpecCxx _swiftPart;
  };

} // namespace margelo::nitro::biolink::core
