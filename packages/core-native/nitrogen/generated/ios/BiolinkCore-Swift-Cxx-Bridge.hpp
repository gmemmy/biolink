///
/// BiolinkCore-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declarations of C++ defined types
// Forward declaration of `HybridBiolinkCoreSpec` to properly resolve imports.
namespace margelo::nitro::biolink::core { class HybridBiolinkCoreSpec; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridBiolinkCoreSpecCxx` to properly resolve imports.
namespace BiolinkCore { class HybridBiolinkCoreSpecCxx; }

// Include C++ defined types
#include "HybridBiolinkCoreSpec.hpp"
#include <NitroModules/PromiseHolder.hpp>
#include <future>
#include <memory>
#include <optional>
#include <string>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::biolink::core::bridge::swift {

  // pragma MARK: PromiseHolder<bool>
  /**
   * Specialized version of `PromiseHolder<bool>`.
   */
  using PromiseHolder_bool_ = PromiseHolder<bool>;
  inline PromiseHolder<bool> create_PromiseHolder_bool_() {
    return PromiseHolder<bool>();
  }
  
  // pragma MARK: PromiseHolder<void>
  /**
   * Specialized version of `PromiseHolder<void>`.
   */
  using PromiseHolder_void_ = PromiseHolder<void>;
  inline PromiseHolder<void> create_PromiseHolder_void_() {
    return PromiseHolder<void>();
  }
  
  // pragma MARK: std::optional<std::string>
  /**
   * Specialized version of `std::optional<std::string>`.
   */
  using std__optional_std__string_ = std::optional<std::string>;
  inline std::optional<std::string> create_std__optional_std__string_(const std::string& value) {
    return std::optional<std::string>(value);
  }
  
  // pragma MARK: PromiseHolder<std::optional<std::string>>
  /**
   * Specialized version of `PromiseHolder<std::optional<std::string>>`.
   */
  using PromiseHolder_std__optional_std__string__ = PromiseHolder<std::optional<std::string>>;
  inline PromiseHolder<std::optional<std::string>> create_PromiseHolder_std__optional_std__string__() {
    return PromiseHolder<std::optional<std::string>>();
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::biolink::core::HybridBiolinkCoreSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::biolink::core::HybridBiolinkCoreSpec>`.
   */
  using std__shared_ptr_margelo__nitro__biolink__core__HybridBiolinkCoreSpec_ = std::shared_ptr<margelo::nitro::biolink::core::HybridBiolinkCoreSpec>;
  std::shared_ptr<margelo::nitro::biolink::core::HybridBiolinkCoreSpec> create_std__shared_ptr_margelo__nitro__biolink__core__HybridBiolinkCoreSpec_(size_t swiftReferenceId);
  size_t get_std__shared_ptr_margelo__nitro__biolink__core__HybridBiolinkCoreSpec_(std__shared_ptr_margelo__nitro__biolink__core__HybridBiolinkCoreSpec_ cppType);

} // namespace margelo::nitro::biolink::core::bridge::swift
