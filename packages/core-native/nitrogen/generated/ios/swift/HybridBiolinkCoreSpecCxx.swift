///
/// HybridBiolinkCoreSpecCxx.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/**
 * Holds instances of HybridBiolinkCoreSpecCxx and stores them under Integer IDs.
 * Those Integer IDs can be used in C++ to box the Swift type to prevent cyclic includes.
 */
public final class HybridBiolinkCoreSpecCxxReferenceHolder {
  private static var instances: [Int : HybridBiolinkCoreSpecCxx] = [:]
  private static var counter: Int = 0

  public static func put(_ instance: HybridBiolinkCoreSpecCxx) -> Int {
    let id = counter
    counter += 1
    instances[id] = instance
    return id
  }

  public static func getById(_ instanceId: Int) -> HybridBiolinkCoreSpecCxx {
    let instance = instances[instanceId]!
    instances.removeValue(forKey: instanceId)
    return instance
  }
}

/**
 * A class implementation that bridges HybridBiolinkCoreSpec over to C++.
 * In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
 *
 * Also, some Swift types need to be bridged with special handling:
 * - Enums need to be wrapped in Structs, otherwise they cannot be accessed bi-directionally (Swift bug: https://github.com/swiftlang/swift/issues/75330)
 * - Other HybridObjects need to be wrapped/unwrapped from the Swift TCxx wrapper
 * - Throwing methods need to be wrapped with a Result<T, Error> type, as exceptions cannot be propagated to C++
 */
public class HybridBiolinkCoreSpecCxx {
  /**
   * The Swift <> C++ bridge's namespace (`margelo::nitro::biolink::core::bridge::swift`)
   * from `BiolinkCore-Swift-Cxx-Bridge.hpp`.
   * This contains specialized C++ templates, and C++ helper functions that can be accessed from Swift.
   */
  public typealias bridge = margelo.nitro.biolink.core.bridge.swift

  /**
   * Holds an instance of the `HybridBiolinkCoreSpec` Swift protocol.
   */
  private var __implementation: any HybridBiolinkCoreSpec

  /**
   * Create a new `HybridBiolinkCoreSpecCxx` that wraps the given `HybridBiolinkCoreSpec`.
   * All properties and methods bridge to C++ types.
   */
  public init(_ implementation: some HybridBiolinkCoreSpec) {
    self.__implementation = implementation
    /* no base class */
  }

  /**
   * Get the actual `HybridBiolinkCoreSpec` instance this class wraps.
   */
  @inline(__always)
  public func getHybridBiolinkCoreSpec() -> any HybridBiolinkCoreSpec {
    return __implementation
  }

  /**
   * Contains a (weak) reference to the C++ HybridObject to cache it.
   */
  public var hybridContext: margelo.nitro.HybridContext {
    @inline(__always)
    get {
      return self.__implementation.hybridContext
    }
    @inline(__always)
    set {
      self.__implementation.hybridContext = newValue
    }
  }

  /**
   * Get the memory size of the Swift class (plus size of any other allocations)
   * so the JS VM can properly track it and garbage-collect the JS object if needed.
   */
  @inline(__always)
  public var memorySize: Int {
    return self.__implementation.memorySize
  }

  // Properties
  

  // Methods
  @inline(__always)
  public func authenticate() -> bridge.PromiseHolder_bool_ {
    do {
      let __result = try self.__implementation.authenticate()
      return { () -> bridge.PromiseHolder_bool_ in
        let __promiseHolder = bridge.create_PromiseHolder_bool_()
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(std.string(String(describing: __error))) })
        return __promiseHolder
      }()
    } catch {
      let __message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(__message))")
    }
  }
  
  @inline(__always)
  public func storeSecret(key: std.string, value: std.string) -> bridge.PromiseHolder_void_ {
    do {
      let __result = try self.__implementation.storeSecret(key: String(key), value: String(value))
      return { () -> bridge.PromiseHolder_void_ in
        let __promiseHolder = bridge.create_PromiseHolder_void_()
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(std.string(String(describing: __error))) })
        return __promiseHolder
      }()
    } catch {
      let __message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(__message))")
    }
  }
  
  @inline(__always)
  public func getSecret(key: std.string) -> bridge.PromiseHolder_std__optional_std__string__ {
    do {
      let __result = try self.__implementation.getSecret(key: String(key))
      return { () -> bridge.PromiseHolder_std__optional_std__string__ in
        let __promiseHolder = bridge.create_PromiseHolder_std__optional_std__string__()
        __result
          .then({ __result in __promiseHolder.resolve({ () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = __result {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()) })
          .catch({ __error in __promiseHolder.reject(std.string(String(describing: __error))) })
        return __promiseHolder
      }()
    } catch {
      let __message = "\(error.localizedDescription)"
      fatalError("Swift errors can currently not be propagated to C++! See https://github.com/swiftlang/swift/issues/75290 (Error: \(__message))")
    }
  }
}
