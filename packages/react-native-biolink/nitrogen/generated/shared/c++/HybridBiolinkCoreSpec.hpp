///
/// HybridBiolinkCoreSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `SensorAvailability` to properly resolve imports.
namespace margelo::nitro::biolink::native { struct SensorAvailability; }
// Forward declaration of `SimplePromptOptions` to properly resolve imports.
namespace margelo::nitro::biolink::native { struct SimplePromptOptions; }

#include <NitroModules/Promise.hpp>
#include <optional>
#include <string>
#include "SensorAvailability.hpp"
#include "SimplePromptOptions.hpp"

namespace margelo::nitro::biolink::native {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `BiolinkCore`
   * Inherit this class to create instances of `HybridBiolinkCoreSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridBiolinkCore: public HybridBiolinkCoreSpec {
   * public:
   *   HybridBiolinkCore(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridBiolinkCoreSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridBiolinkCoreSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridBiolinkCoreSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual std::shared_ptr<Promise<bool>> authenticate(std::optional<bool> fallbackToDeviceCredential) = 0;
      virtual std::shared_ptr<Promise<void>> storeSecret(const std::string& key, const std::string& value) = 0;
      virtual std::shared_ptr<Promise<std::optional<std::string>>> getSecret(const std::string& key) = 0;
      virtual std::shared_ptr<Promise<std::string>> signChallenge(const std::string& challenge) = 0;
      virtual std::shared_ptr<Promise<std::string>> getPublicKey() = 0;
      virtual std::shared_ptr<Promise<SensorAvailability>> isSensorAvailable() = 0;
      virtual std::shared_ptr<Promise<bool>> biometricKeysExist() = 0;
      virtual std::shared_ptr<Promise<void>> deleteKeys() = 0;
      virtual std::shared_ptr<Promise<bool>> simplePrompt(const std::optional<SimplePromptOptions>& options) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "BiolinkCore";
  };

} // namespace margelo::nitro::biolink::native
