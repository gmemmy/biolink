///
/// SensorAvailability.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `BiometryType` to properly resolve imports.
namespace margelo::nitro::biolink::native { enum class BiometryType; }

#include "BiometryType.hpp"

namespace margelo::nitro::biolink::native {

  /**
   * A struct which can be represented as a JavaScript object (SensorAvailability).
   */
  struct SensorAvailability {
  public:
    bool available     SWIFT_PRIVATE;
    BiometryType biometryType     SWIFT_PRIVATE;

  public:
    SensorAvailability() = default;
    explicit SensorAvailability(bool available, BiometryType biometryType): available(available), biometryType(biometryType) {}
  };

} // namespace margelo::nitro::biolink::native

namespace margelo::nitro {

  using namespace margelo::nitro::biolink::native;

  // C++ SensorAvailability <> JS SensorAvailability (object)
  template <>
  struct JSIConverter<SensorAvailability> final {
    static inline SensorAvailability fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return SensorAvailability(
        JSIConverter<bool>::fromJSI(runtime, obj.getProperty(runtime, "available")),
        JSIConverter<BiometryType>::fromJSI(runtime, obj.getProperty(runtime, "biometryType"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const SensorAvailability& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "available", JSIConverter<bool>::toJSI(runtime, arg.available));
      obj.setProperty(runtime, "biometryType", JSIConverter<BiometryType>::toJSI(runtime, arg.biometryType));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<bool>::canConvert(runtime, obj.getProperty(runtime, "available"))) return false;
      if (!JSIConverter<BiometryType>::canConvert(runtime, obj.getProperty(runtime, "biometryType"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
