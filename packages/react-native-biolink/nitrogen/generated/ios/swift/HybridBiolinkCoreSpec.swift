///
/// HybridBiolinkCoreSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridBiolinkCoreSpec``
public protocol HybridBiolinkCoreSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func authenticate(fallbackToDeviceCredential: Bool?) throws -> Promise<Bool>
  func storeSecret(key: String, value: String) throws -> Promise<Void>
  func getSecret(key: String) throws -> Promise<String?>
  func signChallenge(challenge: String) throws -> Promise<String>
  func getPublicKey() throws -> Promise<String>
  func isSensorAvailable() throws -> Promise<SensorAvailability>
  func biometricKeysExist() throws -> Promise<Bool>
  func deleteKeys() throws -> Promise<Void>
  func simplePrompt(options: SimplePromptOptions?) throws -> Promise<Bool>
}

/// See ``HybridBiolinkCoreSpec``
public class HybridBiolinkCoreSpec_base {
  private weak var cxxWrapper: HybridBiolinkCoreSpec_cxx? = nil
  public func getCxxWrapper() -> HybridBiolinkCoreSpec_cxx {
  #if DEBUG
    guard self is HybridBiolinkCoreSpec else {
      fatalError("`self` is not a `HybridBiolinkCoreSpec`! Did you accidentally inherit from `HybridBiolinkCoreSpec_base` instead of `HybridBiolinkCoreSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridBiolinkCoreSpec_cxx(self as! HybridBiolinkCoreSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the BiolinkCore HybridObject.
 * Implement this protocol to create Swift-based instances of BiolinkCore.
 * ```swift
 * class HybridBiolinkCore : HybridBiolinkCoreSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridBiolinkCoreSpec = HybridBiolinkCoreSpec_protocol & HybridBiolinkCoreSpec_base
