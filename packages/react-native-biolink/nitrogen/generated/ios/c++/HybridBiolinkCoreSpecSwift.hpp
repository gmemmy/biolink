///
/// HybridBiolinkCoreSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridBiolinkCoreSpec.hpp"

// Forward declaration of `HybridBiolinkCoreSpec_cxx` to properly resolve imports.
namespace BiolinkCore { class HybridBiolinkCoreSpec_cxx; }



#include <NitroModules/Promise.hpp>
#include <optional>
#include <string>

#include "BiolinkCore-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::biolink::native {

  /**
   * The C++ part of HybridBiolinkCoreSpec_cxx.swift.
   *
   * HybridBiolinkCoreSpecSwift (C++) accesses HybridBiolinkCoreSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridBiolinkCoreSpec_cxx can directly inherit from the C++ class HybridBiolinkCoreSpec
   * to simplify the whole structure and memory management.
   */
  class HybridBiolinkCoreSpecSwift: public virtual HybridBiolinkCoreSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridBiolinkCoreSpecSwift(const BiolinkCore::HybridBiolinkCoreSpec_cxx& swiftPart):
      HybridObject(HybridBiolinkCoreSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline BiolinkCore::HybridBiolinkCoreSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::shared_ptr<Promise<bool>> authenticate(std::optional<bool> fallbackToDeviceCredential) override {
      auto __result = _swiftPart.authenticate(fallbackToDeviceCredential);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> storeSecret(const std::string& key, const std::string& value) override {
      auto __result = _swiftPart.storeSecret(key, value);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::optional<std::string>>> getSecret(const std::string& key) override {
      auto __result = _swiftPart.getSecret(key);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> signChallenge(const std::string& challenge) override {
      auto __result = _swiftPart.signChallenge(challenge);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> getPublicKey() override {
      auto __result = _swiftPart.getPublicKey();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    BiolinkCore::HybridBiolinkCoreSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::biolink::native
